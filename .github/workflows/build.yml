name: Build & Tag

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install mise and uv (if not already)
        run: |
          if ! command -v mise &> /dev/null; then
            curl https://mise.run | sh
            export PATH="$HOME/.local/share/mise/bin:$PATH"
          fi
          export PATH="$HOME/.local/bin:$PATH"
          mise install uv

      - name: Setup Python via mise
        run: |
          export PATH="$HOME/.local/share/mise/bin:$PATH"
          mise install
          mise exec -- python --version
      
      - name: Create and activate venv via uv
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          mise exec -- uv venv
          mise exec -- uv pip install -r requirements.txt

      # - name: Run tests
      #   run: |
      #     export PATH="$HOME/.local/share/mise/bin:$PATH"
      #     mise exec -- pytest tests/

      - name: Create build artifact with PyInstaller
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          source .venv/bin/activate
          pyinstaller --onefile src/main.py --name lol-replay-trigger


      - name: Package build as ZIP
        run: |
          mkdir -p dist
          cd dist
          zip ../build.zip lol-replay-trigger
          cd ..

      - name: Auto tag (patch version)
        if: startsWith(github.ref, 'refs/heads/')
        id: tagger
        run: |
          LAST_TAG=$(git tag | sort -V | tail -n 1)
          if [ -z "$LAST_TAG" ]; then
            VERSION="v0.0.1"
          else
            VERSION=$(echo "$LAST_TAG" | awk -F. '{OFS="."; $3+=1; print $1,$2,$3}')
          fi
          git tag "$VERSION"
          git push origin "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          TAG_NAME=${{ github.ref_name }}
          PREV_TAG=$(git tag --sort=creatordate | grep -B1 "$TAG_NAME" | head -n 1)
      
          TEMP_FILE=$(mktemp)
          HEADER_FILE=$(mktemp)
          BODY_FILE=$(mktemp)
      
          # タイトルだけ保持（最初の1行）
          if [ -f CHANGELOG.md ]; then
            head -n 1 CHANGELOG.md > $HEADER_FILE
            tail -n +2 CHANGELOG.md > $BODY_FILE
          else
            echo "# Changelog" > $HEADER_FILE
          fi
      
          echo "" >> $HEADER_FILE
          echo "## $TAG_NAME" >> $HEADER_FILE
      
          if [ -z "$PREV_TAG" ]; then
            echo "- 初回リリースだよ〜！" >> $HEADER_FILE
          else
            git log "$PREV_TAG..$TAG_NAME" --pretty=format:"- %s" >> $HEADER_FILE
          fi
      
          echo "" >> $HEADER_FILE
          cat $BODY_FILE >> $HEADER_FILE
          mv $HEADER_FILE CHANGELOG.md
      
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "update changelog for $TAG_NAME"
          git push origin HEAD:master


      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tagger.outputs.version }}
          name: "Release ${{ steps.tagger.outputs.version }}"
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ZIP to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tagger.outputs.version }}
          files: build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
